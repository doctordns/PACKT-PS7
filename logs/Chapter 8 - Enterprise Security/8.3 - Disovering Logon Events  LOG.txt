# 8.3 - Discovering Logon Events  Log



PS C:\Foo> # 1. Getting Security log events
PS C:\Foo> $SecLog = Get-WinEvent -ListLog Security
PS C:\Foo> "Security Event log entries:    [{0,10:N0}]" -f $Seclog.RecordCount
Security Event log entries:    [    29,940]



PS C:\Foo> # 2. Getting all Windows Security log event details
PS C:\Foo> $SecEvents = Get-WinEvent -LogName Security
"Found $($SecEvents.count) security events"
Found 29943 security events on DC1


PS C:\Foo> # 3: Examining Security event log entry members
PS C:\Foo> $SecEvents | Get-Member

   TypeName: System.Diagnostics.Eventing.Reader.EventLogRecord
Name                 MemberType   Definition
----                 ----------   ----------
Dispose              Method       void Dispose(), void IDisposable.Dispose()
Equals               Method       bool Equals(System.Object obj)
FormatDescription    Method       string FormatDescription(), string FormatDescription(System.Collections.Ge…
GetHashCode          Method       int GetHashCode()
GetPropertyValues    Method       System.Collections.Generic.IList[System.Object] GetPropertyValues(System.D…
GetType              Method       type GetType()
ToString             Method       string ToString()
ToXml                Method       string ToXml()
Message              NoteProperty string Message=An account was logged off.…
ActivityId           Property     System.Nullable[guid] ActivityId {get;}
Bookmark             Property     System.Diagnostics.Eventing.Reader.EventBookmark Bookmark {get;}
ContainerLog         Property     string ContainerLog {get;}
Id                   Property     int Id {get;}
Keywords             Property     System.Nullable[long] Keywords {get;}
KeywordsDisplayNames Property     System.Collections.Generic.IEnumerable[string] KeywordsDisplayNames {get;}  
Level                Property     System.Nullable[byte] Level {get;}
LevelDisplayName     Property     string LevelDisplayName {get;}
LogName              Property     string LogName {get;}
MachineName          Property     string MachineName {get;}
MatchedQueryIds      Property     System.Collections.Generic.IEnumerable[int] MatchedQueryIds {get;}
Opcode               Property     System.Nullable[short] Opcode {get;}
OpcodeDisplayName    Property     string OpcodeDisplayName {get;}
ProcessId            Property     System.Nullable[int] ProcessId {get;}
Properties           Property     System.Collections.Generic.IList[System.Diagnostics.Eventing.Reader.EventP…
ProviderId           Property     System.Nullable[guid] ProviderId {get;}
ProviderName         Property     string ProviderName {get;}
Qualifiers           Property     System.Nullable[int] Qualifiers {get;}
RecordId             Property     System.Nullable[long] RecordId {get;}
RelatedActivityId    Property     System.Nullable[guid] RelatedActivityId {get;}
Task                 Property     System.Nullable[int] Task {get;}
TaskDisplayName      Property     string TaskDisplayName {get;}
ThreadId             Property     System.Nullable[int] ThreadId {get;}
TimeCreated          Property     System.Nullable[datetime] TimeCreated {get;}
UserId               Property     System.Security.Principal.SecurityIdentifier UserId {get;}
Version              Property     System.Nullable[byte] Version {get;}

PS C:\Foo> # 4. Summarizing security events by event ID
PS C:\Foo> $SecEvents |
             Sort-Object -Property Id |
               Group-Object -Property ID |
                 Sort-Object -Property Name |
                   Format-Table -Property Name, Count

Name Count
---- -----
4616     6
4624 10507
4625     3
4634  9813
4647     1
4648    45
4672  8671
4768   210
4769   354
4770    27
4776     3
4799     7
4907    66
5058     1
5059     1
5061     1
5379   227




PS C:\Foo> # 5. Getting all successful logon events on DC1
PS C:\Foo> $Logons = $SecEvents | Where-Object ID -eq 4624   # logon event
PS C:\Foo> "Found $($Logons.count) logon events"
Found 10507 logon events



PS C:\Foo> # 6. Getting all failed logon events on DC1
PS C:\Foo> $FLogons = $SecEvents | Where-Object ID -eq 4625   # failed logon event
PS C:\Foo> "Found $($FLogons.Count) failed logon events on DC1"
Found 3 failed logon events on DC1




# 7. Create summary array of logon events

no output




PS C:\Foo> # 8. Summarizing successful logon events on DC1
PS C:\Foo> $LogonEvents |
             Group-Object -Property LogonType |
               Sort-Object -Property Name |
                 Select-Object -Property Name,Count

Name Count
---- -----
10       2 
2       13
3     9801
5      691



# 9. Creating a summary array of failed logon events on DC1


no output



PS C:\Foo> # 10. Summarizing failed logon events on DC1
PS C:\Foo> $FLogonEvents | 
             Group-Object -Property Account |
               Sort-Object -Property Name |
                 Format-Table Name, Count

Name                 Count
----                 -----
cookham\bar              2
RESKIT\Administrator     1

