# 3.2 Using the Windows PowerShell Compatibility solution  LOG

# run on SRV1 after loading PowerShell 7/VS Code.


# 1. Discover the Server Manager module

No output



PS C:\Foo> # 2. Discovering a command in the Server Manager module
PS C:\Foo> Get-Command -Name Get-ChildItem

CommandType  Name                Version   Source
-----------  ----                -------   ------
Function     Get-WindowsFeature  1.0       ServerManager





PS C:\Foo> # 3. Importing the module explicitly
PS C:\Foo> Import-Module -Name ServerManager
WARNING: Module servermanager is loaded in Windows PowerShell using 
WinPSCompatSession remoting session; please note that all input and 
output of commands from this module will be deserialized objects. If 
you want to load this module into PowerShell please use 
'Import-Module -SkipEditionCheck' syntax.




PS C:\Foo> # 4. Discovering the module again
PS C:\Foo> Get-Module -Name ServerManager | Format-List

Name              : servermanager
Path              : C:\Users\Administrator\AppData\Local\Temp\1\remoteIpMoProxy_servermanager_2.0.0.0_localho
                    st_ab3b80b5-19af-49e2-b91d-55cf6f245c2f\remoteIpMoProxy_servermanager_2.0.0.0_localhost_a
                    b3b80b5-19af-49e2-b91d-55cf6f245c2f.psm1
Description       : Implicit remoting for
ModuleType        : Script
Version           : 1.0
PreRelease        :
NestedModules     : {}
ExportedFunctions : {Disable-ServerManagerStandardUserRemoting, Enable-ServerManagerStandardUserRemoting,
                    Get-WindowsFeature, Install-WindowsFeature, Uninstall-WindowsFeature}
ExportedCmdlets   :
ExportedVariables :
ExportedAliases   : {Add-WindowsFeature, Remove-WindowsFeature}



PS C:\Foo> # 5. Using a command in the ServerManager module
PS C:\Foo> Get-WindowsFeature -Name DHCP

Display Name   Name          Install State
------------   ----          -------------
               TFTP-Client   Available




PS C:\Foo> # 6. Running the command in a remoting session
PS C:\Foo> $Session = Get-PSSession -Name WInPSCompatSession
PS C:\Foo> Invoke-Command -Session $Session -ScriptBlock {
             Get-WindowsFeature -Name DHCP |
               Format-Table
           }

Display Name     Name         Install State
------------     ----         -------------
[ ] TFTP Client  TFTP-Client  Available







PS C:\Foo> # 8. Installing a Windows feature using module autoload
PS C:\Foo> Install-WindowsFeature -Name TFTP-Client

Success Restart Needed Exit Code  Feature Result
------- -------------- ---------  --------------
True    No             Success    {TFTP Client}}





PS C:\Foo> # 9. Discovering the feature
PS C:\Foo> Get-WindowsFeature -Name TFTP-Client

Display Name   Name         Install State
------------   ----         -------------
               TFTP-Client      Installed





PS C:\Foo> # 10. Viewing output inside Windows PowerShell session
PS C:\Foo> Invoke-Command -Session $Session -ScriptBlock {
             Get-WindowsFeature -Name 'TFTP-Client' |
               Format-Table
           }

Display Name      Name           Install State
------------      ----            -------------
[X] TFTP Client   TFTP-Client        Installed




