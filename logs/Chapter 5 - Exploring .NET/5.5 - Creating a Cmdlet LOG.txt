# 5.5 Create New Cmdlet

# Run on SRV1 after loading PowerShell


# 1. install .NET SDK

Check the GUI!


PS C:\Foo> # 2. Creating the cmdlet folder
PS C:\Foo> New-Item -Path C:\Foo\Cmdlet -ItemType Directory -Force

    Directory: C:\Foo

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----          01/12/2020    20:34                Cmdlet

PS C:\Foo> Set-Location C:\Foo\Cmdlet
PS C:\Foo\Cmdlet>



PS C:\Foo\Cmdlet> # 3. Creating a new class library project
PS C:\Foo\Cmdlet> dotnet new classlib --name SendGreeting
The template "Class library" was created successfully.

Processing post-creation actions...
Running 'dotnet restore' on SendGreeting\SendGreeting.csproj...
  Determining projects to restore...
  Restored C:\Foo\Cmdlet\SendGreeting\SendGreeting.csproj (in 92 ms).
Restore succeeded.




PS C:\Foo\Cmdlet> # 4. Viewing contents of new folder
PS C:\Foo\Cmdlet> Set-Location -Path .\SendGreeting
PS C:\Foo\Cmdlet\SendGreeting> Get-ChildItem

    Directory: C:\Foo\Cmdlet\SendGreeting

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----          01/12/2020    20:40                obj
-a---          01/12/2020    20:40             89 Class1.cs
-a---          01/12/2020    20:40            137 SendGreeting.csproj





PS C:\Foo\Cmdlet\SendGreeting> # 5. Creating and displaying global.json
PS C:\Foo\Cmdlet\SendGreeting> dotnet new globaljson
The template "global.json file" was created successfully.
PS C:\Foo\Cmdlet\SendGreeting> Get-Content -Path .\global.json

{
  "sdk": {
    "version": "5.0.100"
  }
}



PS C:\Foo\Cmdlet\SendGreeting> # 6. Adding PowerShell package
PS C:\Foo\Cmdlet\SendGreeting> dotnet add package PowerShellStandard.Library
  Determining projects to restore...
  Writing C:\Users\Administrator\AppData\Local\Temp\1\tmpDF50.tmp
info : Adding PackageReference for package 'PowerShellStandard.Library' into project 'C:\Foo\Cmdlet\SendGreeting\SendGreeting.csproj'.
info :   GET https://api.nuget.org/v3/registration5-gz-semver2/powershellstandard.library/index.json
info :   OK https://api.nuget.org/v3/registration5-gz-semver2/powershellstandard.library/index.json 413ms
info : Restoring packages for C:\Foo\Cmdlet\SendGreeting\SendGreeting.csproj...
info :   GET https://api.nuget.org/v3-flatcontainer/powershellstandard.library/index.json
info :   OK https://api.nuget.org/v3-flatcontainer/powershellstandard.library/index.json 400ms
info :   GET https://api.nuget.org/v3-flatcontainer/powershellstandard.library/5.1.0/powershellstandard.library.5.1.0.nupkg
info :   OK https://api.nuget.org/v3-flatcontainer/powershellstandard.library/5.1.0/powershellstandard.library.5.1.0.nupkg 14ms
info : Installing PowerShellStandard.Library 5.1.0.
info : Package 'PowerShellStandard.Library' is compatible with all the specified frameworks in project 'C:\Foo\Cmdlet\SendGreeting\SendGreeting.csproj'.
info : PackageReference for package 'PowerShellStandard.Library' version '5.1.0' added to file 'C:\Foo\Cmdlet\SendGreeting\SendGreeting.csproj'.
info : Committing restore...
info : Writing assets file to disk. Path: C:\Foo\Cmdlet\SendGreeting\obj\project.assets.json
log  : Restored C:\Foo\Cmdlet\SendGreeting\SendGreeting.csproj (in 1.04 sec).




PS C:\Foo\Cmdlet\SendGreeting> # 7. Create the cmdlet source file
PS C:\Foo\Cmdlet\SendGreeting> $Cmdlet = @"
using System.Management.Automation;  // Windows PowerShell assembly.
namespace Reskit
{
  // Declare the class as a cmdlet
  // Specify verb and noun = Send-Greeting
  [Cmdlet(VerbsCommunications.Send, "Greeting")]
  public class SendGreetingCommand : PSCmdlet
  {
    // Declare the parameters for the cmdlet.
    [Parameter(Mandatory=true)]
    public string Name
    {
      get { return name; }
      set { name = value; }
    }
    private string name;
    // Override the ProcessRecord method to process the
    // supplied name and write a geeting to the user by
    // calling the WriteObject method.
    protected override void ProcessRecord()
    {
      WriteObject("Hello " + name + " - have a nice day!");
    }
  }
}
"@
PS C:\Foo\Cmdlet\SendGreeting> $Cmdlet | Out-File .\SendGreetingCommand.cs


# 8. Removing unused class file 



no output




PS C:\Foo\Cmdlet\SendGreeting> # 9. Building the cmdlet
PS C:\Foo\Cmdlet\SendGreeting> dotnet build
Microsoft (R) Build Engine version 16.8.0+126527ff1 for .NET
Copyright (C) Microsoft Corporation. All rights reserved.

  Determining projects to restore...
  All projects are up-to-date for restore.
  SendGreeting -> C:\Foo\Cmdlet\SendGreeting\bin\Debug\net5.0\SendGreeting.dll

Build succeeded.
    0 Warning(s)
    0 Error(s)

Time Elapsed 00:00:03.55




# 10. Importing the DLL holding the cmdlet


no output




PS C:\Foo\Cmdlet\SendGreeting> # 11. Examining at Module
PS C:\Foo\Cmdlet\SendGreeting> Get-Module SendGreeting

ModuleType Version    PreRelease Name           ExportedCommands
---------- -------    ---------- ----           ----------------
Binary     1.0.0.0               SendGreeting   Send-Greeting




PS C:\Foo\Cmdlet\SendGreeting> # 12. Using the cmdlet
PS C:\Foo\Cmdlet\SendGreeting> Send-Greeting -Name "Jerry Garcia"
Hello Jerry Garcia - have a nice day!


