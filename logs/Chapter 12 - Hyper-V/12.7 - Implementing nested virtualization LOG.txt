# Recipe 12.7 - Implementing nested virtualization
#
# Run on HV1


#  1. Stopping the PSDirect VM


no output


PS C:\Foo> # 2. Setting the VM's processor to support virtualization
PS C:\Foo> $VMHT = @{
             VMName                         = ‘PSDirect’
             ExposeVirtualizationExtensions = $true
           }
PS C:\Foo> Set-VMProcessor @VMHT
PS C:\Foo> Get-VMProcessor -VMName PSDirect |
             Format-Table -Property Name, Count,
                                    ExposeVirtualizationExtensions

Name      Count ExposeVirtualizationExtensions
----      ----- ------------------------------
Processor     2                           True




PS C:\Foo> # 3. Starting the PSDirect VM
PS C:\Foo> Start-VM -VMName PSDirect
PS C:\Foo> Wait-VM  -VMName PSDirect -For Heartbeat
PS C:\Foo> Get-VM   -VMName PSDirect

Name     State   CPUUsage(%) MemoryAssigned(M) Uptime           Status             Version
----     -----   ----------- ----------------- ------           ------             -------
PSDirect Running 0           722               00:00:48.9830000 Operating normally 10.0




# 4. Creating credentials for PSDirect



no output




# 5. Creating a script block for remote execution


no output




# 6. Creating a remoting session to PSDirect


no output



PS C:\Foo> # 7. Installing Hyper-V inside PSDirect
PS C:\Foo> $IHT = @{
             Session     = $Session
             ScriptBlock = $SB 
           }
PS C:\Foo> Invoke-Command @IHT

PSComputerName : PSDirect
RunspaceId     : 6565ef1f-c33a-4b8b-94d5-603ed98781be
Success        : True
RestartNeeded  : Yes
FeatureResult  : {Hyper-V, Hyper-V Module for Windows PowerShell, Hyper-V GUI Management Tools, Remote Server Administration Tools, Hyper-V Management Tools, Role Administration Tools}
ExitCode       : SuccessRestartRequired

WARNING: You must restart this server to finish the installation process




PS C:\Foo> # 8. Restarting the VM to finish adding Hyper-V to PSDirect
PS C:\Foo> Stop-VM  -VMName PSDirect
PS C:\Foo> Wait-VM  -VMName PSDirect -For IPAddress
PS C:\Foo> Get-VM   -VMName PSDirect

Name     State   CPUUsage(%) MemoryAssigned(M) Uptime           Status             Version
----     -----   ----------- ----------------- ------           ------             -------
PSDirect Running 18          1024              00:00:57.6530000 Operating normally 10.0





PS C:\Foo> # 9. Creating a nested VM inside the PSDirect VM
PS C:\Foo> $SB2 = {
                   $VMname = 'NestedVM'
                   New-VM -Name $VMname -MemoryStartupBytes 1GB
                    Get-VM
           }
PS C:\Foo> $IHT2 = @{
                     VMName = 'PSDirect'
                     ScriptBlock = $SB2
           }
PS C:\Foo> Invoke-Command @IHT2 -Credential $CredRK

Name     State CPUUsage(%) MemoryAssigned(M) Uptime   Status             Version PSComputerName
----     ----- ----------- ----------------- ------   ------             ------- --------------
NestedVM Off   0           0                 00:00:00 Operating normally 9.0     PSDirect


 
