# 1.3 Exploring PWSH 7 Installation Artifacts
#
# Run in PWSH 7 Console

PS C:\Users\Administrator> # 1. Checking the version table for PowerShell 7 console
PS C:\Users\Administrator> $PSVersionTable

Name                           Value
----                           -----
PSVersion                      7.1.0
PSEdition                      Core
GitCommitId                    7.1.0
OS                             Microsoft Windows 10.0.20270
Platform                       Win32NT
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0â€¦}
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
WSManStackVersion              3.0




PS C:\Users\Administrator> # 2. Examining the PowerShell 7 installation folder
PS C:\Users\Administrator> Get-Childitem -Path $env:ProgramFiles\PowerShell\7 -Recurse |
                             Measure-Object -Property Length -Sum

Count             : 982
Average           :
Sum               : 252056323
Maximum           :
Minimum           :
StandardDeviation :
Property          : Length






PS C:\Users\Administrator> # 3. Viewing PowerShell configuration JSON file
PS C:\Users\Administrator> Get-ChildItem -Path $env:ProgramFiles\PowerShell\7\powershell*.json |
                             Get-Content
{
    "WindowsPowerShellCompatibilityModuleDenyList":  [
                                                         "PSScheduledJob",
                                                         "BestPractices",
                                                         "UpdateServices"
                                                     ],
    "Microsoft.PowerShell:ExecutionPolicy":  "RemoteSigned"
}




PS C:\Users\Administrator> # 4. Checking initial Execution Policy for PowerShell 7
PS C:\Users\Administrator> Get-ExecutionPolicy
RemoteSigned




PS C:\Users\Administrator> # 5. Viewing module folders
PS C:\Users\Administrator> $I = 0
PS C:\Users\Administrator> $ModPath = $env:PSModulePath -split ';'
PS C:\Users\Administrator> $ModPath |
                             Foreach-Object {
                              "[{0:N0}]   {1}" -f $I++, $_
                           }
[0]   C:\Users\Administrator\Documents\PowerShell\Modules
[1]   C:\Program Files\PowerShell\Modules
[2]   c:\program files\powershell\7\Modules
[3]   C:\Program Files\WindowsPowerShell\Modules
[4]   C:\Windows\system32\WindowsPowerShell\v1.0\Modules





PS C:\Users\Administrator> # 6. Checking the modules
PS C:\Users\Administrator> $TotalCommands = 0
PS C:\Users\Administrator> Foreach ($Path in $ModPath){
                             Try { $Modules = Get-ChildItem -Path $Path -Directory -ErrorAction Stop
                                   "Checking Module Path:  [$Path]"
                             }
                             Catch [System.Management.Automation.ItemNotFoundException] {
                             "Module path [$path] DOES NOT EXIST ON $(hostname)"
                             }
                             $CmdsInPath = 0
                             Foreach ($Module in $Modules) {
                               $Cmds = Get-Command -Module ($Module.name)
                               $TotalCommands += $Cmds.Count
                             }
                           }
Module path [C:\Users\Administrator\Documents\PowerShell\Modules] DOES NOT EXIST ON SRV1
Module path [C:\Program Files\PowerShell\Modules] DOES NOT EXIST ON SRV1
Checking Module Path:  [c:\program files\powershell\7\Modules]
Checking Module Path:  [C:\Program Files\WindowsPowerShell\Modules]
Checking Module Path:  [C:\Windows\system32\WindowsPowerShell\v1.0\Modules]]





PS C:\Users\Administrator> # 7. Viewing totals of commands and modules
PS C:\Users\Administrator> $Mods = (Get-Module * -ListAvailable | Measure-Object).count
PS C:\Users\Administrator> "{0} modules providing {1} commands" -f $Mods,$TotalCommands
72 modules providing 4930 commands




