# 2.1 Exploring New Operators

# Run on SRV1 after installing PowerShell 7 and VS COde


PS C:\Foo> # 1. Checking results traditionally
PS C:\Foo> Write-Output 'Something that succeeds'
Something that succeeds
PS C:\Foo> if ($?) {Write-Output 'It worked'}
It worked




PS C:\Foo> # 2. Checking results With Pipeline operator &&
PS C:\Foo> Write-Output 'Something that succeeds' && Write-Output 'It worked'
Something that succeeds
It worked




PS C:\Foo> # 3. Using Pipeline chain operator  ||
PS C:\Foo> Write-Output 'Something that succeeds' || 
             Write-Output 'You do not see this message'
Something that succeeds








# 4. Define a simple function



no Output




PS C:\Foo> # 5. Using the || operator
PS C:\Foo> $OldErrorAction        = $ErrorActionPreference
PS C:\Foo> $ErrorActionPreference = 'SilentlyContinue'
PS C:\Foo> Get-ChildItem -Path C:\FOO\CASCADIAPL.TTF  || 
             Install-CascadiaPLFont
Installing Cascadia PL font..
PS C:\Foo> $ErrorActionPreference = $OldErrorAction





# 6. Create a function to test null handling


no Output







PS C:\Foo> # 7. Testing null results traditionally
PS C:\Foo> $Result1 = Test-NCO    # no parameter
PS C:\Foo> if ($null -eq $Result1) {
             'Function returned no value'
           } else {
             $Result1
           }
Function returned no value
PS C:\Foo> $Result2 = Test-NCO 42  # using a parameter
            if ($null -eq $Result2) {
              'Function returned no value'
            } else {
               $Result2
            }   
Test-NCO returned a result





PS C:\Foo> # 8. Tesing using Null Coalescing operator ??
PS C:\Foo> $Result3 =  Test-NCO
PS C:\Foo> $Result3 ?? 'Function returned no value'
Function returned no value
PS C:\Foo> $Result4 =  Test-NCO 42
PS C:\Foo> $Result4 ?? 'This is not output, but result is'
Test-NCO returned a result






PS C:\Foo> # 9. Demonstrating Null Conditional Assignment Operator
PS C:\Foo> $Result5 = Test-NCO
PS C:\Foo> $Result5 ?? 'Result is is null'
Result is is null
PS C:\Foo> $Result5 ??= Test-NCO 42
PS C:\Foo> $Result5
Test-NCO returned a result




PS C:\Foo> # 10. Running a method on a null object traditionally
PS C:\Foo> $BitService.Stop()
InvalidOperation: 
Line |
   2 |  $BitService.Stop()
     |  ~~~~~~~~~~~~~~~~~~
     | You cannot call a method on a null-valued expression.
     





# 11. Show Null conditional operator for a method




No Output




PS C:\Foo> # 12. Testing Null property name access
PS C:\Foo> $x = $null
PS C:\Foo> ${x}?.Propname
PS C:\Foo> $x = @{Propname=42}
PS C:\Foo> ${x}?.Propname
42



PS C:\Foo> # 13. Testing array member access of a null object
PS C:\Foo> $Y = $null
PS C:\Foo> ${Y}?[0]
PS C:\Foo> $Y = 1,2,3
PS C:\Foo> ${Y}?[0]
1


PS C:\Foo> # 14. Using background processing operator &
PS C:\Foo> Get-CimClass -ClassName Win32_Bios &

Id  Name  PSJobTypeName  State    HasMoreData   Location    Command
--  ----  -------------  -----    -----------   --------    -------
1   Job1  BackgroundJob  Running  True          localhost   Microsoft.PowerShell.Man…



PS C:\Foo>  # 15. Waiting for the job to complete
PS C:\Foo>  $JobId = (Get-Job | Select-Object -Last 1).Id
PS C:\Foo>  Wait-Job -Id $JobId

Id  Name  PSJobTypeName  State     HasMoreData   Location   Command
--  ----  -------------  -----     -----------   --------   -------
1   Job1  BackgroundJob  Completed True          localhost  Microsoft.PowerShell.Man…



PS C:\Foo> # 16. Viewing the output
PS C:\Foo> $Results = Receive-Job -Id $JobId
PS C:\Foo> $Results

   NameSpace:
CimClassName   CimClassMethods  CimClassProperties
------------   ---------------  ------------------
Win32_BIOS     {}               {Caption, Description, InstallDate, Name…




PS C:\Foo> # 17. Creating an object without using the ternary operator
PS C:\Foo> $A = 42; $B = (42,4242) | Get-Random
PS C:\Foo> $RandomTest = ($true, $false) | Get-Random
PS C:\Foo> if ($A -eq $B) {
             $Property1 = $true
           } else {
             $Property1 = $false
           }
PS C:\Foo> if ($RandomTest) {
             $Property2 = 'Hello'
             } else {
             $Property2 = 'Goodbye'
           }
PS C:\Foo> [PSCustomObject]@{
             "Property1" = $Property1
             "Property2" = $Property2
           }

Property1 Property2
--------- ---------
    False Hello






PS C:\Foo> # 18. Creating an object using the ternary operator
PS C:\Foo> [PSCustomObject]@{
             "Property1" = (($A -eq $B) ? $true : $false)
             "Property2" = (($RandomTest) ? 'Hello' : 'Goodbye')
           }

Property1 Property2
--------- ---------
    False Hello








